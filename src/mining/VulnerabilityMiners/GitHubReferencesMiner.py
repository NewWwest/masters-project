import json
import tqdm

from src.utils.utils import is_hexadecimal_string
from src.loaders.OmniLoader import OmniLoader
from src.proxies.GitHubProxy import GithubProxy

class GitHubReferencesMiner:
    def __init__(self, githubProxy:GithubProxy, checkpoint_path, checkpoint_frequency=100  ) -> None:
        self.githubProxy = githubProxy
        self.checkpoint_path = checkpoint_path
        self.checkpoint_frequency = checkpoint_frequency


    def _get_standarized_refs(self, github_refs):
        refs_to_process = []

        for url in github_refs:
            segments = url.split('#')[0].split('/')
            if len(segments) < 7:
                continue

            repo_owner = segments[3]
            repo_name = segments[4]
            reference_type = segments[5]
            reference_value = segments[6]

            if reference_type == 'commit' or reference_type == 'commits':
                res = GitHubReferencesMiner.GitHubReference(repo_owner, repo_name, 'commit', reference_value)
                refs_to_process.append(res)
                pass
            elif '/issue/' in url or '/issues/' in url or '/pull/' in url:
                res = GitHubReferencesMiner.GitHubReference(repo_owner, repo_name, 'issue', reference_value)
                refs_to_process.append(res)
                pass
            elif '/compare/' in url:
                res = GitHubReferencesMiner.GitHubReference(repo_owner, repo_name, 'compare', reference_value)
                refs_to_process.append(res)
                pass 
            elif '/blob/' in url or '/tree/' in url:
                if is_hexadecimal_string(reference_value):
                    res = GitHubReferencesMiner.GitHubReference(repo_owner, repo_name, 'commit', reference_value)
                    refs_to_process.append(res)
                pass

        unique_refs = []
        for ref in refs_to_process:
            unique = True
            for other in unique_refs:
                if ref.repo_owner == other.repo_owner \
                    and ref.repo_name==ref.repo_name \
                    and ref.reference_type==ref.reference_type \
                    and ref.reference_value==ref.reference_value:
                    unique = False
                    break

            if unique:
                unique_refs.append(ref)

        return unique_refs


    def _make_csv_obj(self, report_id, ref, data, aliases):
        csv_object = {}
        csv_object['report_id'] = report_id
        csv_object['aliases'] = json.dumps(aliases)
        csv_object['repo_owner'] = ref.repo_owner
        csv_object['repo_name'] = ref.repo_name
        csv_object['reference_type'] = ref.reference_type
        csv_object['reference_value'] = ref.reference_value
        csv_object['data'] = json.dumps(data)
        return csv_object


    def _download_refs_data_for_vulnerability(self, report_id, refs, aliases):
        resolved_refs = []
        data = ''
        for ref in refs:
            if ref.reference_type == 'commit':
                data = self.githubProxy.get_commit_data(ref.repo_owner, ref.repo_name, ref.reference_value)
                if data == None:
                    continue
                data_csv_ready = self._make_csv_obj(report_id, ref, data, aliases)
                resolved_refs.append(data_csv_ready)
            elif ref.reference_type == 'issue':
                data = self.githubProxy.get_issue_data(ref.repo_owner, ref.repo_name, ref.reference_value)
                if data == None:
                    continue
                data_csv_ready = self._make_csv_obj(report_id, ref, data, aliases)
                resolved_refs.append(data_csv_ready)
            elif ref.reference_type == 'compare':
                data = self.githubProxy.get_compare_data(ref.repo_owner, ref.repo_name, ref.reference_value)
                if data == None:
                    continue
                data_csv_ready = self._make_csv_obj(report_id, ref, data, aliases)
                resolved_refs.append(data_csv_ready)
            else:
                raise Exception(f'Unknown reference_type {ref.reference_type}')
        
        return resolved_refs


    def process_vulnerabilities(self, omniLoader:OmniLoader):
        current_data = {}
        with tqdm.tqdm(total=len(omniLoader.reports)) as pbar:
            for report_id in omniLoader.reports:
                try:
                    refs = omniLoader.references_from_report_list(omniLoader.reports[report_id])
                    github_refs = [x for x in refs if '/github.com/' in x]
                    refs = self._get_standarized_refs(github_refs)
                    resolved_refs = self._download_refs_data_for_vulnerability(report_id, refs, omniLoader.related_ids[report_id])
                    if resolved_refs != None and len(resolved_refs) > 0:
                        current_data[report_id] = resolved_refs
                except Exception as e:
                    print(f'Exception in processing vulnerability {report_id}')
                    print(e)

                if len(current_data) >= self.checkpoint_frequency:
                    with open(f'{self.checkpoint_path}/data_{report_id}.json', 'w') as f:
                        json.dump(current_data, f)
                    current_data = {}

            pbar.update()

        with open(f'{self.checkpoint_path}/data_last.json', 'w') as f:
            json.dump(current_data, f)


    class GitHubReference:
        def __init__(self, repo_owner:str, repo_name:str, reference_type:str, reference_value:str) -> None:
            self.repo_owner = repo_owner
            self.repo_name = repo_name
            self.reference_type = reference_type
            self.reference_value = reference_value
